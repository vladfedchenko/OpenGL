/*
 * ShaderProgram.cpp
 *
 *  Created on: Aug 21, 2016
 *      Author: vladfedchenko
 */

#include "../Headers/ShaderProgram.h"
#include "assert.h"
#include <string>
#include <fstream>
#include <exception>

namespace VladFedchenko{
namespace GL{

	ShaderProgram::ShaderProgram(GLuint program)
	{
		if (glIsProgram(program) != GL_TRUE)
		{
			printf("Passed ID is not a program!");
			throw std::exception();
		}
		this->program = program;
	}

	ShaderProgram::ShaderProgram(const ShaderInfo *shaders, int shaderCount)
	{
		this->program = glCreateProgram();
		if(this->program == 0)
		{
			printf("Create Program Error!");
			throw std::exception();
		}

		for (int i = 0; i < shaderCount; ++i)
		{
			GLuint shader = glCreateShader(shaders[i].type);
			std::string src;
			this->ReadShader(shaders[i].filename, src);
			const char *srcRef = src.c_str();
			glShaderSource(shader, 1, &srcRef, 0);
			glCompileShader(shader);

			GLint sStatus;
			glGetShaderiv(shader, GL_COMPILE_STATUS, &sStatus);

			if(sStatus == GL_FALSE)
			{
				printf("Shader compile failed! Index - " + i + "\n");

				GLsizei infoLen;

				throw std::exception();
			}

			glAttachShader(this->program, shader);
		}

		glLinkProgram(this->program);

		GLint linked;
		glGetProgramiv(this->program, GL_LINK_STATUS, &linked);

	}

	void ShaderProgram::ReadShader(const char* filename, std::string &s)
	{
		std::string line("");
		std::ifstream shaderFile(filename);
		if (shaderFile.is_open())
		{
			while(std::getline(shaderFile, line))
			{
				s += line + "\n";
			}
			shaderFile.close();
		}
	}

}}


