#version 330 core

uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 ToLightDir;
uniform vec3 HalfVector;
uniform float Shininess;
uniform float ReflStrength;

layout (location = 0) out vec4 color;

in vec3 vs_fs_normal;
in vec2 vs_tex_coord;

void main(void)
{
	float difuse = max(0.0, dot(vs_fs_normal, ToLightDir));
	float specular = max(0.0, dot(vs_fs_normal, HalfVector));
	
	if (difuse == 0.0)
	{
		specular = 0.0;
	}
	else
	{
		specular = pow(specular, Shininess);
	}
	
	vec3 scattered = Ambient + difuse * LightColor;
	vec3 reflected = ReflStrength * specular * LightColor;
	
    color = vs_fs_color * (0.1 + abs(vs_fs_normal.z)) + vec4(0.8, 0.9, 0.7, 1.0) * pow(abs(vs_fs_normal.z), 40.0);
}
