#include "LoadShaders.h"
#include <glm/common.hpp>
#include <glm/gtc/matrix_transform.hpp>

#define VERT_NUM 24
#define INSTANCE_NUM 4

GLuint VAO[1];
GLuint buffer[3];
GLuint element_array_buffer[1];

void init(void)
{
	ShaderInfo shaders[] = {
				{GL_VERTEX_SHADER, "./triangles.vert"},
				{GL_FRAGMENT_SHADER, "./triangles.frag"},
				{GL_NONE, NULL}
			};

	GLuint program = LoadShaders(shaders);
	if(program == 0)
	{
		return;
	}
	glUseProgram(program);

	glGenVertexArrays(1, VAO);
	glBindVertexArray(*VAO);

	GLuint indexes[4] = { 0, 1, 2, 3};

	glGenBuffers(1, element_array_buffer);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, *element_array_buffer);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indexes), indexes, GL_STATIC_DRAW);

	glGenBuffers(3, buffer);
	glBindBuffer(GL_ARRAY_BUFFER, buffer[0]);

	GLfloat vertices[VERT_NUM][3] =
	{
		{-0,5, -0.5, 0.5}, {-0,5, 0.5, 0.5}, {0,5, 0.5, 0.5}, {0,5, -0.5, 0.5},
		{-0,5, -0.5, -0.5}, {-0,5, 0.5, -0.5}, {0,5, 0.5, -0.5}, {0,5, -0.5, -0.5},
		{-0,5, -0.5, -0.5}, {-0,5, -0.5, 0.5}, {0,5, -0.5, 0.5}, {0,5, -0.5, -0.5},
		{-0,5, 0.5, -0.5}, {-0,5, 0.5, 0.5}, {0,5, 0.5, 0.5}, {0,5, 0.5, -0.5},
		{-0,5, -0.5, -0.5}, {-0,5, -0.5, 0.5}, {-0,5, 0.5, 0.5}, {-0,5, 0.5, -0.5},
		{0,5, -0.5, -0.5}, {0,5, -0.5, 0.5}, {0,5, 0.5, 0.5}, {0,5, -0.5, -0.5}
	};

	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	int vertex_loc = glGetAttribLocation(program, "position");
	glVertexAttribPointer(vertex_loc, 3, GL_FLOAT, GL_FALSE, 0, NULL);
	glEnableVertexAttribArray(vertex_loc);

	glBindBuffer(GL_ARRAY_BUFFER, buffer[1]);

	GLfloat colors[VERT_NUM][4] =
	{
		{1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0},
		{1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0}, {1.0, 0.0, 0.0, 1.0},
		{0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0},
		{0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0}, {0.0, 1.0, 0.0, 1.0},
		{0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0},
		{0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0}, {0.0, 0.0, 1.0, 1.0}
	};

	glBufferData(GL_ARRAY_BUFFER, sizeof(colors), colors, GL_STATIC_DRAW);

	int color_loc = glGetAttribLocation(program, "color");
	glVertexAttribPointer(color_loc, 4, GL_FLOAT, GL_FALSE, 0, NULL);
	glEnableVertexAttribArray(color_loc);

	glBindBuffer(GL_ARRAY_BUFFER, buffer[2]);

		GLfloat normals[VERT_NUM][3] =
		{
			{0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0},
			{0.0, 0.0, -1.0}, {0.0, 0.0, -1.0}, {0.0, 0.0, -1.0}, {0.0, 0.0, -1.0},
			{0.0, -1.0, 0.0}, {0.0, -1.0, 0.0}, {0.0, -1.0, 0.0}, {0.0, -1.0, 0.0},
			{0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0},
			{-1.0, 0.0, 0.0}, {-1.0, 0.0, 0.0}, {-1.0, 0.0, 0.0}, {-1.0, 0.0, 0.0},
			{1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}
		};

		glBufferData(GL_ARRAY_BUFFER, sizeof(normals), normals, GL_STATIC_DRAW);

		int norm_loc = glGetAttribLocation(program, "normal");
		glVertexAttribPointer(norm_loc, 3, GL_FLOAT, GL_FALSE, 0, NULL);
		glEnableVertexAttribArray(norm_loc);

	glm::vec3 eye(-3.0, 0.0, 3.0);
	glm::vec3 norm(3.0, 0.0, -3.0);
	glm::vec3 up(3.0, 0.0, 3.0);
	glm::mat4 view_mat = glm::lookAt(eye, norm, up);

	glm::mat4 project_mat = glm::frustum(-1.0, 1.0, -1.0, 1.0, 1.0, 100.0);

	GLuint view_matr_loc = glGetUniformLocation(program, "view_matrix");
	GLuint proj_matr_loc = glGetUniformLocation(program, "projection_matrix");

	glUniformMatrix4fv(view_matr_loc, GL_FALSE, view_mat);
	glUniformMatrix4fv(proj_matr_loc, GL_FALSE, project_mat);

	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);

	for (int i = 0; i < 6; ++i)
	{
		glDrawElements(GL_TRIANGLE_FAN, 4, GL_FLOAT, (const GLvoid*)(i * 4));
	}
	glFlush();
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(512, 512);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);
	glutCreateWindow(argv[0]);

	glewExperimental = GL_TRUE;
	if (glewInit())
	{
		std::cerr << "Unable to initialize GLEW ... exiting" << std::endl;
		exit(EXIT_FAILURE);
	}

	init();
	glutDisplayFunc(display);
	glutMainLoop();
}
